FROM FREECODECAMP.ORG

#HTML5 and CSS

- Title = <h1>TITLE<!h1>
- Change color style of text = <h1 style="color:red">TEXT WILL BE RED</h1>
- Paragraph = <p>WRITE YOUR TEXT<!p>
- Make invisible text <!-- YOUR INVISIBLE CODE OR TEXT -->
- Create CSS style element = e.g. = <style> h2 {color: red;} </style> <!-- means all text in h2 will be red / curly braces is done by option/alt 8 and 9 -->
- Use a CSS Class to Style an Element = <style> .red-text {color: red;} </style>
  - THEN = e.g. = <h2 class="red-text">TEXT WILL BE RED</h2>
- Change the Font Size of an Element = <style> p {font-size: 16px;} </style> <!-- attributed to all p -->
- Set the Font Family of an Element = For example, if you wanted to set your h2 element's font to Sans-serif, you would use the following CSS: h2 {font-family: Sans-serif;}
- Add an image = <img src="https://THE LINK TO THE IMAGE" alt="DESCRIPTION">
- Size your Images = CSS has a property called width that controls an element's width. Just like with fonts, we'll use px (pixels) to specify the image's width.= For example, if we wanted to create a CSS class called `larger-image` that gave HTML elements a width of 500 pixels, we'd use: <style> .larger-image {width: 500px;} </style>
- Add Borders Around your Elements = CSS borders have properties like style, color and width = For example, if we wanted to create a red, 5 pixel border around an HTML element, we could use this class: <style> .thin-red-border {border-color: red; border-width: 5px; border-style: solid;} </style> = Remember that you can apply multiple classes to an element by separating each class with a space within its class attribute. For example: <img class="class1 class2">
- Add Rounded Corners with a Border Radius = We can round out those corners with a CSS property called border-radius = You can specify a border-radius with pixels = <style> .border-radius {border-radius: 10px;} </style>
- Make Circular Images with a Border Radius = In addition to pixels, you can also specify a border-radius using a percentage = <style> .border-radius {border-radius: 50%;} </style>
- Link to External Pages with Anchor Elements = a elements, also known as anchor elements, are used to link to content outside of the current page = <p> <a href="http://freecodecamp.org"> link to Free Code Camp</a> </p>
- Nest an Anchor Element within a Paragraph = Nesting just means putting one element inside of another element = <p>Click here for <a href="http://www.freecatphotoapp.com">cat photos</a>.</p>
- Make Dead Links using the Hash Symbol = Sometimes you want to add a elements to your website before you know where they will link. This is also handy when you're changing the behavior of a link using jQuery, which we'll learn about later. Replace the value of your a element's href attribute with a #, also known as a hash symbol, to turn it into a dead link = <p>Click here for <a href="#">cat photos</a>.</p>
- Turn an Image into a Link = You can make elements into links by nesting them within an a element. Nest your image within an a element. Here's an example: <a href="#"><img src="https://bit.ly/fcc-running-cats" alt="Three kittens running towards the camera. "></a> Remember to use # as your a element's href property in order to turn it into a dead link.
- Create a Bulleted Unordered List = HTML has a special element for creating unordered lists, or bullet point-style lists. Unordered lists start with a <ul> element. Then they contain some number of <li> elements. For example: <ul> <li>milk</li>
  <li>cheese</li></ul> = would create a bullet point-style list of "milk" and "cheese".
- Create an Ordered List = HTML has a special element for creating ordered lists, or numbered-style lists. Ordered lists start with a <ol> element. Then they contain some number of <li> elements. For example: <ol> <li>Garfield</li> <li>Sylvester</li> </ol> = would create a numbered list of "Garfield" and "Sylvester".
- Create a Text Field = Now let's create a web form. Text inputs are a convenient way to get input from your user. You can create one like this: <input type="text"> Note that input elements are self-closing.
- Add Placeholder Text to a Text Field = Your placeholder text is what appears in your text input before your user has input anything. You can create placeholder text like so: <input type="text" placeholder="this is placeholder text">
- Create a Form Element = You can build web forms that actually submit data to a server using nothing more than pure HTML. You can do this by specifying an action on your form element.For example: <form action="/url-where-you-want-to-submit-form-data"></form>
- Add a Submit Button to a Form = Let's add a submit button to your form. Clicking this button will send the data from your form to the URL you specified with your form's action attribute. Here's an example submit button: <button type="submit">this button submits the form</button>
- Use HTML5 to Require a Field = You can require specific form fields so that your user will not be able to submit your form until he or she has filled them out. For example, if you wanted to make a text input field required, you can just add the word required within your input element, you would use: <input type="text" required>
- Create a Set of Radio Buttons = You can use radio buttons for questions where you want the user to only give you one answer. Radio buttons are a type of input. Each of your radio buttons should be nested within its own label element. All related radio buttons should have the same name attribute. Here's an example of a radio button: <label><input type="radio" name="indoor-outdoor"> Indoor</label>
- Create a Set of Checkboxes = Forms commonly use checkboxes for questions that may have more than one answer. Checkboxes are a type of input. Each of your checkboxes should be nested within its own label element. All related checkbox inputs should have the same name attribute. Here's an example of a checkbox: <label><input type="checkbox" name="personality"> Loving</label>
- Check Radio Buttons and Checkboxes by Default = You can set a checkbox or radio button to be checked by default using the checked attribute. To do this, just add the word "checked" to the inside of an input element. For example: <input type="radio" name="test-name" checked>
- Nest Many Elements within a Single Div Element = The div element, also known as a division element, is a general purpose container for other elements. The div element is probably the most commonly used HTML element of all. It's useful for passing the CSS of its own class declarations down to all the elements that it contains. Just like any other non-self-closing element, you can open a div element with <div> and close it on another line with </div>.
- Give a Background Color to a Div Element = You can set an element's background color with the background-color property. For example, if you wanted an element's background color to be green, you'd put this within your style element: .green-background {background-color: green;}
- Set the ID of an Element = In addition to classes, each HTML element can also have an id attribute. There are several benefits to using id attributes, and you'll learn more about them once you start using jQuery. id attributes should be unique. Browsers won't enforce this, but it is a widely agreed upon best practice. So please don't give more than one element the same id attribute. Here's an example of how you give your h2 element the id of cat-photo-app: <h2 id="cat-photo-app">
- Use an ID Attribute to Style an Element = One cool thing about id attributes is that, like classes, you can style them using CSS. Here's an example of how you can take your element with the id attribute of cat-photo-element and give it the background color of green. In your style element: #cat-photo-element {background-color: green;} Note that inside your style element, you always reference classes by putting a . in front of their names. You always reference ids by putting a # in front of their names.
- Adjusting the Padding of an Element = Now let's put our Cat Photo App away for a little while and learn more about styling HTML. You may have already noticed this, but all HTML elements are essentially little rectangles. Three important properties control the space that surrounds each HTML element: padding, margin, and border. An element's padding controls the amount of space between the element and its border.
- Adjust the Margin of an Element = An element's margin controls the amount of space between an element's border and surrounding elements.
- Add a Negative Margin to an Element = An element's margin controls the amount of space between an element's border and surrounding elements. If you set an element's margin to a negative value, the element will grow larger.
- Add Different Padding to Each Side of an Element = Sometimes you will want to customize an element so that it has different padding on each of its sides. CSS allows you to control the padding of an element on all four sides with padding-top, padding-right, padding-bottom, and padding-left properties.
- Add Different Margins to Each Side of an Element = Sometimes you will want to customize an element so that it has a different margin on each of its sides. CSS allows you to control the margin of an element on all four sides with margin-top, margin-right, margin-bottom, and margin-left properties.
- Use Clockwise Notation to Specify the Padding of an Element = Instead of specifying an element's padding-top, padding-right, padding-bottom, and padding-left properties, you can specify them all in one line, like this: padding: 10px 20px 10px 20px; These four values work like a clock: top, right, bottom, left, and will produce the exact same result as using the side-specific padding instructions.
- Use Clockwise Notation to Specify the Margin of an Element = Instead of specifying an element's margin-top, margin-right, margin-bottom, and margin-left properties, you can specify them all in one line, like this: margin: 10px 20px 10px 20px; These four values work like a clock: top, right, bottom, left, and will produce the exact same result as using the side-specific margin instructions.
- Style the HTML Body Element = Now let's start fresh and talk about CSS inheritance. Every HTML page has a body element. We can prove that the body element exists here by giving it a background-color of black. We can do this by adding the following to our style element: body {background-color: black;}
- Inherit Styles from the Body Element = Now we've proven that every HTML page has a body element, and that its body element can also be styled with CSS. Remember, you can style your body element just like any other HTML element, and all your other elements will inherit your body element's styles.
- Prioritize One Style Over Another = Sometimes your HTML elements will receive multiple styles that conflict with one another. For example, your h1 element can't be both green and pink at the same time.
- Override Styles in Subsequent CSS = Our "pink-text" class overrode our body element's CSS declaration! We just proved that our classes will override the body element's CSS. So the next logical question is, what can we do to override our pink-text class?
- Override Class Declarations by Styling ID Attributes = We just proved that browsers read CSS from top to bottom. That means that, in the event of a conflict, the browser will use whichever CSS declaration came last. But we're not done yet. There are other ways that you can override CSS. Do you remember id attributes? = e.g. <h1 id="orange-text" ... ALSO IN STYLE ID IS MADE USING # instead of a . (. is for class) e.g. #orange-text {color: orange;}
- Override Class Declarations with Inline Styles = So we've proven that id declarations override class declarations, regardless of where they are declared in your style element CSS. There are other ways that you can override CSS. Do you remember inline styles? Use an in-line style to try to make our h1 element white. Remember, in line styles look like this: <h1 style="color: green">
- Override All Other Styles by using Important = Yay! We just proved that in-line styles will override all the CSS declarations in your style element. But wait. There's one last way to override CSS. This is the most powerful method of all. But before we do it, let's talk about why you would ever want to override CSS. In many situations, you will use CSS libraries. These may accidentally override your own CSS. So when you absolutely need to be sure that an element has specific CSS, you can use !important. Let's go all the way back to our pink-text class declaration. Remember that our pink-text class was overridden by subsequent class declarations, id declarations, and in-line styles. Let's add the keyword !important to your pink-text element's color declaration to make 100% sure that your h1 element will be pink. An example of how to do this is: color: red !important;
- Use Hex Code for Specific Colors = Did you know there are other ways to represent colors in CSS? One of these ways is called hexadecimal code, or hex code for short. We usually use decimals, or base 10 numbers, which use the symbols 0 to 9 for each digit. Hexadecimals (or hex) are base 16 numbers. This means it uses sixteen distinct symbols. Like decimals, the symbols 0-9 represents values zero to nine. Then A,B,C,D,E,F represent values ten to fifteen. Altogether, 0 to F can represent a digit in hexadecimal, giving us 16 total possible values. You can find more information about hexadecimal numbers here. In CSS, we can use 6 hexadecimal digits to represent colors, two each for the red (R), green (G), and blue (B) components. For example, #000000 is black and is also the lowest possible value. You can find more information about the RGB color system here. Replace the word black in our body element's background-color with its hex code representation, #000000
- Use Hex Code to Mix Colors = To review, hex codes use 6 hexadecimal digits to represent colors, two each for red (R), green (G), and blue (B) components. From these three pure colors (red, green, and blue), we can vary the amounts of each to create over 16 million other colors! For example, orange is pure red, mixed with some green, and no blue. In hex code, this translates to being #FFA500. The digit 0 is the lowest number in hex code, and represents a complete absence of color. The digit F is the highest number in hex code, and represents the maximum possible brightness. Replace the color words in our style element with their correct hex codes. Color	Hex Code: Dodger Blue	#2998E4 Green	#00FF00 Orange	#FFA500 Red	#FF0000
- Use Abbreviated Hex Code = Many people feel overwhelmed by the possibilities of more than 16 million colors. And it's difficult to remember hex code. Fortunately, you can shorten it. For example, red's hex code #FF0000 can be shortened to #F00. This shortened form gives one digit for red, one digit for green, and one digit for blue. This reduces the total number of possible colors to around 4,000. But browsers will interpret #FF0000 and #F00 as exactly the same color. Go ahead, try using the abbreviated hex codes to color the correct elements. Color	Short Hex Code: Cyan	#0FF Green	#0F0 Red	#F00 Fuchsia	#F0F
- Use RGB values to Color Elements = Another way you can represent colors in CSS is by using RGB values. The RGB value for black looks like this: rgb(0, 0, 0). The RGB value for white looks like this: rgb(255, 255, 255). Instead of using six hexadecimal digits like you do with hex code, with RGB you specify the brightness of each color with a number between 0 and 255. If you do the math, the two digits for one color equal 16 times 16, which gives us 256 total values. So RGB, which starts counting from zero, has the exact same number of possible values as hex code.
- Use RGB to Mix Colors = Just like with hex code, you can mix colors in RGB by using combinations of different values. Replace the color words in our style element with their correct RGB values. Color	RGB: Blue	rgb(0, 0, 255) Red	rgb(255, 0, 0) Orchid	rgb(218, 112, 214) Sienna	rgb(160, 82, 45)




